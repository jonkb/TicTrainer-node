<!DOCTYPE html>
<html lang="en-us">
	<head>
		<title>TicTrainer Session: User</title>
		<meta name="viewport" content="width=device-width, initial-scale=1">
		<link rel="stylesheet" type="text/css" href="/stylesheets/bgStyle.css">
	</head>
	<body>
    <section class="page-header">
			<div class="header-navbar">
				<a href="/" class="logo"></a>
				<h1>TicTrainer Session: User</h1>
				<div style="clear: both;"></div>
			</div>
    </section>
    <section class="main-content">
			
			<div id='counter_panel'>
				<div>
					<div id='rCounter' class='supCounter'>+0</div>
					<div id='pCounter' class='bigCounter'>**[points]**</div>
				</div>
				<div>
					Level: 
					<span id='lCounter' class='medCounter'>**[level]**</span>
					(<span id='lUp'></span> points to level up)
				</div>
				<div>
					Coins: 
					<span id='cCounter' class='medCounter'>**[coins]**</span>
				</div>
			</div>
			
			<div id="heap">
			</div>
			
    </section>
		<script src="/scripts/req_settings.js"></script>
		<!--For genHeap-->
		<script src="/scripts/store.js"></script>
		<script>
			var already_left = false;
			
			//Change the URL bar
			var url = '/session/session-user.dynh';
			if(window.history.pushState)
				window.history.pushState("", "Session: User", url);
			
			window.onbeforeunload = endS;
			window.onpagehide = endS;
			//document.addEventListener('visibilitychange', function(){if(document.hidden){endS();}}, false);
			
			var ses_vars = {
				"level" : **[level]**,
				"points" : **[points]**,
				"coins" : **[coins]**,
				//REWARD SETTINGS
				"flash_red" : **[flash]**,
				"starting_ms_per_reward" : **[smpr]**,
				"period_to_increment_rate" : **[ptir]**,
				"points_to_first_level" : 300,
				"mspf" : 500,//ms per frame. fps=2.
				"framesSince" : 0,
				"rewards_since_increment" : 0,
				//Last recorded length of the session file. Used to determine if the file has changed.
				"lastL" : **[sesL]**
			};
			
			
			if(ses_vars.level == 0){
				ses_vars.level = 1;
				//First time spiel
				alert('It appears to be your first session. Try not to tic.');
			}
			ses_vars.nextLevel = ses_vars.points_to_first_level*ses_vars.level*ses_vars.level;
			ses_vars.cap = 10*ses_vars.level*ses_vars.level;
			ses_vars.rate = ses_vars.level*ses_vars.level;
			
			req_settings(function(code, res){
				if(code == 200){
					ses_vars.points_to_first_level = res.points_to_first_level;
					start();
				}
				else{
					cleanup();
					document.open();
					document.write(res);
					document.close();
				}
			});
			
			**[del:!ncr]**
			/*Number of reward periods between random ncr tics on avg.
				At level one, the unit is seconds, because reward periods occur once per second,
				but it scales linearly at higher levels.
			*/
			ses_vars.avg_intertic_interval = **[aiti]**; 
			//Return true every once in a while, randomly.
			function ncr_tic(){
				//On average, how many frames pass between tics
				//The 10 means people make it to the cap on avg
				var avg_period = ses_vars.avg_intertic_interval*ses_vars.level/ses_vars.mspf;
				//(1-t_c)^a_p = .5 --> avg period == a_p
				var tic_chance = 1 - Math.pow(0.50, 1/avg_period);
				return Math.random() < tic_chance;
			}
			**[end_del:!ncr]**
			
			function start(){
				update_display();
				frame();
				ses_vars.frame_timer = setInterval(frame, ses_vars.mspf);
				genHeap("**[heap]**");
			}
			function frame(){
				var xhr = new XMLHttpRequest();
				//Needed: reqType, id, lid, sesL
				var reqBody = 'reqType=check&id=**[id]**&lid=**[lid]**&sesL='+ses_vars.lastL;
				xhr.open('POST', url, true);
				xhr.setRequestHeader('Content-type', 'text/plain');//'application/x-www-form-urlencoded'
				xhr.onreadystatechange = function(){
					if(xhr.readyState == 4){//4: request finished & response ready - readystate codes:http://www.w3schools.com/ajax/ajax_xmlhttprequest_onreadystatechange.asp
						if(xhr.status == 200){
							var tic = 0;
							var end = 0;
							var fields = xhr.responseText.split('&');
							ses_vars.lastL = fields[0];//The first field is the newest length of the session file.
							for(i=1; i<fields.length; i++){
								if(fields[i] == 'tic') tic++;
								if(fields[i] == 'end') end++;
							}
							if(end == 0){
								**[del:none]**//If reward scheme is none, delete this block of code
								**[del:ncr]**//If reward scheme is ncr, delete the traditional reward scheme
								//Standard reward scheme
								if(tic == 0)
								**[end_del:ncr]**
								**[del:!ncr]**//Delete this unless it's ncr
								//Alternative reward scheme
								//Uses the random ticcer
								if(!ncr_tic())
								**[end_del:!ncr]**
								{
									ses_vars.framesSince++;
									if(ses_vars.framesSince >= (ses_vars.level * ses_vars.starting_ms_per_reward / ses_vars.mspf)){
										// Now, (level) seconds have passed since the last reward/tic, so it is time to give reward
										ses_vars.framesSince = 0;
										if(ses_vars.rewards_since_increment >= ses_vars.period_to_increment_rate){
											ses_vars.rewards_since_increment = 0;
											if(ses_vars.rate < ses_vars.cap){
												ses_vars.rate += ses_vars.level*ses_vars.level;
												if(ses_vars.rate > ses_vars.cap)//Overshot
													ses_vars.rate = ses_vars.cap;
											}
										}
										ses_vars.points += ses_vars.rate;
										ses_vars.rewards_since_increment++;
										
										if(ses_vars.points > ses_vars.nextLevel)
											levelUp();
										loglpc();//record the new points (it changed)
										update_display();
									}
								}
								else{
									ticTrigger(); 
									update_display();
								}
								**[end_del:none]**
							}
							else{ endS(); }
						}
						else{//For an Error Page
							cleanup();
							var response = xhr.responseText;
							document.open();
							document.write(response);
							document.close();
						}//ERROR
					}
				};
				xhr.send(reqBody);
			}
			function ticTrigger(){
				//Add the right amount of hiccough time
				clearTimeout(ses_vars.frame_timer);
				ses_vars.frame_timer = setInterval(frame, ses_vars.mspf);
				
				ses_vars.framesSince = 0;
			  ses_vars.rate = ses_vars.level*ses_vars.level;
				ses_vars.rewards_since_increment = 0;
				**[del:!reg]**
				if(ses_vars.flash_red){
					flash_cp("red");
				}
				**[end_del:!reg]**
			}
			function flash_cp(color){
				var c_p = document.getElementById('counter_panel');
			  c_p.style.backgroundColor = color;
				ses_vars.cp_timer = setTimeout(function(){
					c_p.style.backgroundColor = "transparent";
				}, 1000);
			}
			function endS(){
				if(!already_left){
					var xhr = new XMLHttpRequest();
					var reqBody = 'reqType=end&id=**[id]**&pw=**[pw]**&lid=**[lid]**&level='
					reqBody += ses_vars.level+'&points='+ses_vars.points+'&coins='+ses_vars.coins;
					cleanup();
					xhr.open('POST', url, true);
					xhr.onreadystatechange = function(){
						if(xhr.readyState == 4){
							var response = xhr.responseText;
							document.open();
							document.write(response);
							document.close();
						}
					}
					xhr.send(reqBody);
					already_left = true;
				}
			}
			function levelUp(){
				ses_vars.level++;
				ses_vars.points -= ses_vars.nextLevel;
				ses_vars.coins += ses_vars.nextLevel/ses_vars.points_to_first_level;
				loglpc();
				ses_vars.nextLevel = ses_vars.points_to_first_level*ses_vars.level*ses_vars.level;
				ses_vars.cap = 10*ses_vars.level*ses_vars.level;
				//Flash green (this green is 10% lighter than the green in the page header)
				flash_cp("#1fe080");
			}
			function update_display(){
				document.getElementById('pCounter').innerHTML = ses_vars.points;
				document.getElementById('rCounter').innerHTML = '+'+ses_vars.rate;
				document.getElementById('lCounter').innerHTML = ses_vars.level;
				document.getElementById('cCounter').innerHTML = ses_vars.coins;
				document.getElementById('lUp').innerHTML = ses_vars.nextLevel;
			}
			/*Make an entry in the session file
				And save progress to the user's account
			*/
			function loglpc(){
				var xhr = new XMLHttpRequest();
				//Needed: reqType, id, pw, lid, l, p, c
				var reqBody = 'reqType=loglpc&id=**[id]**&pw=**[pw]**&lid=**[lid]**&level='
				reqBody += ses_vars.level+'&points='+ses_vars.points+'&coins='+ses_vars.coins;
				xhr.open('POST', url, true);
				xhr.onreadystatechange = function(){
					if(xhr.readyState == 4){
						if(xhr.status != 200){//Display Error Page
							var response = xhr.responseText;
							document.open();
							document.write(response);
							document.close();
						}
					}
				}
				xhr.send(reqBody);
			}
			function cleanup(){
				if(ses_vars.frame_timer)
					clearTimeout(ses_vars.frame_timer);
				if(ses_vars.cp_timer)
					clearTimeout(ses_vars.cp_timer);
				ses_vars = {};
			}
		</script>
	</body>
</html>