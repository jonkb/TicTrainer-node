<!DOCTYPE html>
<html lang="en-us">
	<head>
		<title>TicTrainer Session: User</title>
		<meta name="viewport" content="width=device-width, initial-scale=1">
		<link rel="stylesheet" type="text/css" href="/stylesheets/bgStyle.css">
	</head>
	<body>
    <section class="page-header">
			<div class="header-navbar">
				<a href="/" class="logo"></a>
				<h1>TicTrainer Session: User</h1>
				<div style="clear: both;"></div>
			</div>
    </section>
    <section class="main-content">
			
			<div id='counter_panel'>
				<div>
					<div id='rCounter' class='supCounter'>+0</div>
					<div id='pCounter' class='bigCounter'>**[points]**</div>
				</div>
				<div>
					Level: 
					<span id='lCounter' class='medCounter'>**[level]**</span>
					(<span id='lUp'></span> points to level up)
				</div>
				<div>
					Coins: 
					<span id='cCounter' class='medCounter'>**[coins]**</span>
				</div>
			</div>
			
			<div id="heap">
			</div>
			
    </section>
		<!--For genHeap-->
		<script src="/scripts/store.js"></script>
		<script>
			//Change the URL bar
			if(window.history.pushState)
				window.history.pushState("", "Session: User", "/session/session-user.dynh");
		
			var salido = false;//salido -sp- left
			window.onbeforeunload = endS;
			window.onpagehide = endS;
			//document.addEventListener('visibilitychange', function(){if(document.hidden){endS();}}, false);
			
			var level = **[level]**;
			var points = **[points]**;
			var coins = **[coins]**;
			if(level == 0){
				level = 1;
				//First time spiel
				alert('It appears to be your first session. Try not to tic.');
			}
			
			const mspf = 500;//ms per frame. fps=2.
			var framesSince = 0;
			var nextLevel = 1000*level*level;
			var cap = 10*level*level;
			var rate = 0;
			//Last recorded length of the session file. Used to determine if the file has changed.
			var lastL = **[sesL]**;
			
			**[del:!ncr]**
			//On average, how many frames pass between tics
			//The 10 means people make it to the cap on avg
			const avg_period = 10;
			//(1-t_c)^a_p = .5 --> avg period == a_p
			const tic_chance = 1 - Math.pow(0.50, 1/avg_period);
			//Return true every once in a while, randomly.
			function ncr_tic(){
				return Math.random() < tic_chance;
			}
			**[end_del:!ncr]**
			
			update_display();
			frame();
			genHeap("**[heap]**");
			function frame(){
				var xhr = new XMLHttpRequest();
				var url = '/session/session-user.dynh';
				var reqBody = 'reqType=check&id=**[id]**&pw=**[pw]**&lid=**[lid]**&level='+level+'&points='+points+'&sesL='+lastL;
				xhr.open('POST', url, true);
				xhr.setRequestHeader('Content-type', 'text/plain');//'application/x-www-form-urlencoded'
				xhr.onreadystatechange = function(){
					if(xhr.readyState == 4){//4: request finished & response ready - readystate codes:http://www.w3schools.com/ajax/ajax_xmlhttprequest_onreadystatechange.asp
						if(xhr.status == 200){
							var tic = 0;
							var end = 0;
							var fields = xhr.responseText.split('&');
							lastL = fields[0];//The first field is the newest length of the session file.
							for(i=1; i<fields.length; i++){
								if(fields[i] == 'tic') tic++;
								if(fields[i] == 'end') end++;
							}
							if(end == 0){
								**[del:none]**
								//Alternatively, I could keep the red flash (ticTrigger) for NONE.
								**[del:ncr]**
								//Standard reward scheme
								if(tic == 0)
								**[end_del:ncr]**
								**[del:!ncr]**
								//Alternative reward scheme
								//Uses the random ticcer
								if(!ncr_tic())
								**[end_del:!ncr]**
								{
									framesSince++;
									if(framesSince >= (level * 1000 / mspf)){
										// Now, (level) seconds have passed since the last reward/tic, so it is time to increment rate and give reward
										framesSince = 0;
										if(rate < cap){
											rate += level*level;
											if(rate > cap)//Overshot
												rate = cap;
										}
										points += rate;
										if(points > nextLevel)
											levelUp();
										loglpc();//record the new points (it changed)
										update_display();
									}
								}
								else{
									ticTrigger(); 
									update_display();
								}
								**[end_del:none]**
								setTimeout(function(){ frame(); }, mspf);
							}
							else{ endS(); }
						}
						else{//For an Error Page
							document.open();
							document.write(xhr.responseText);
							document.close();
						}//ERROR
					}
				};
				xhr.send(reqBody);
			}
			function ticTrigger(){//Flash red. Sound a bell?
				framesSince = 0;
			  rate = 0;
			  document.getElementById('counter_panel').setAttribute('style', 'background-color:red;');
			  setTimeout(function(){document.getElementById('counter_panel').setAttribute('style', '');}, 1000);
			}
			function endS(){
				if(!salido){
					var xhr = new XMLHttpRequest();
					var url = '/session/session-user.dynh'
					//source,id,pw,lid,level,points
					var reqBody = 'reqType=end&id=**[id]**&pw=**[pw]**&lid=**[lid]**&level='+level+'&points='+points+'&coins='+coins;
					xhr.open('POST', url, true);
					xhr.onreadystatechange = function(){
						if(xhr.readyState == 4){
							document.open();
							document.write(xhr.responseText);
							document.close();
						}
					}
					xhr.send(reqBody);
					salido = true;
				}
			}
			function levelUp(){
				level++;
				points -= nextLevel;
				coins += nextLevel/1000;
				loglpc();
				nextLevel = 1000*level*level;
				cap = 10*level*level;
				//Flash green (this green is 10% lighter than the green in the page header)
			  document.getElementById('counter_panel').setAttribute('style', 'background-color:#1fe080');
			  setTimeout(function(){document.getElementById('counter_panel').setAttribute('style', '');}, 1000);
			}
			function update_display(){
				document.getElementById('pCounter').innerHTML = points;
				document.getElementById('rCounter').innerHTML = '+'+rate;
				document.getElementById('lCounter').innerHTML = level;
				document.getElementById('cCounter').innerHTML = coins;
				document.getElementById('lUp').innerHTML = nextLevel;
			}
			/*Make an entry in the session file
				And save progress to the user's account
			*/
			function loglpc(){
				var xhr = new XMLHttpRequest();
				var url = '/session/session-user.dynh'
				//source,id,pw,lid,level,points
				var reqBody = 'reqType=loglpc&id=**[id]**&pw=**[pw]**&lid=**[lid]**&level='+level+'&points='+points+'&coins='+coins;
				xhr.open('POST', url, true);
				xhr.onreadystatechange = function(){
					if(xhr.readyState == 4){
						if(xhr.status != 200){//Display Error Page
							document.open();
							document.write(xhr.responseText);
							document.close();
						}
					}
				}
				xhr.send(reqBody);
			}
		</script>
	</body>
</html>